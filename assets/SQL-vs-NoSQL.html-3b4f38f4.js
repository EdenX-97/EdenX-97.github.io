import{_ as l,W as n,X as o,Y as e,Z as t,$ as r,a0 as s,a1 as a,E as d}from"./framework-5afa3ebb.js";const c={},u=a('<h2 id="sql-relational" tabindex="-1"><a class="header-anchor" href="#sql-relational" aria-hidden="true">#</a> SQL - Relational</h2><ul><li>Structured and need to predefined the schema of data</li><li>MySQL, Oracle, Postgres, MS SQL Server, SQLite, MariaDB</li><li>Use SQL language</li></ul><h2 id="nosql-nonrelational" tabindex="-1"><a class="header-anchor" href="#nosql-nonrelational" aria-hidden="true">#</a> NoSQL - NonRelational</h2><ul><li>Key-Value store <ul><li>All data stores in key-value pairs</li><li>DynamoDB, Redis</li></ul></li><li>Document Database <ul><li>Data stores in documents and documents are grouped in collections, documents can have different structure</li><li>MongoDB</li></ul></li><li>Wide-Column Database <ul><li>Data stores in column families</li><li>HBase, Cassandra</li></ul></li><li>Graph Database <ul><li>Data stores in graph structures with nodes, properties and lines (connections)</li><li>Neo4J, InfiniteGraph</li></ul></li></ul><h2 id="differences" tabindex="-1"><a class="header-anchor" href="#differences" aria-hidden="true">#</a> Differences</h2>',5),h=a("<li>Storage <ul><li>SQL stores data in tables, each row represents an entity, and each column represents an attribute</li><li>NoSQL have different data storage models, they are key-value, document, wide-column, graph</li></ul></li><li>Schema <ul><li>SQL have a fixed schema of data, we need to confirm all attributes when we insert a data. We can modify the schema, but it need some downtime</li><li>NoSQL have a dynamic schema, we do not need to make sure every attributes exist when we insert a data, and we can also add more attributes dynamically when we need</li></ul></li><li>Query <ul><li>SQL use structured query language to define or process data</li><li>NoSQL do not use structured query language, and different type of NoSQL database have different kind of method to query</li></ul></li><li>Scalability <ul><li>SQL can vertical scale, by improve the hardware</li><li>NoSQL can horizontal scale, by add mroe machines</li></ul></li>",4),m=e("ul",null,[e("li",null,"Most SQL database are ACID compliancy"),e("li",null,"Most NoSQL database are not ACID compliancy to improve performance and scalability")],-1),f=a('<h2 id="which-one-to-use" tabindex="-1"><a class="header-anchor" href="#which-one-to-use" aria-hidden="true">#</a> Which one to use</h2><h3 id="why-sql" tabindex="-1"><a class="header-anchor" href="#why-sql" aria-hidden="true">#</a> Why SQL</h3><ol><li>When we need to ensure ACID compliance, it will be better to use SQL database, it can reduces the exceptions and protects the integrity of database</li><li>We can predesign the structure of data, and do not want to often scale the database</li><li>Suitable for e-commerce and financial system</li></ol><h3 id="why-nosql" tabindex="-1"><a class="header-anchor" href="#why-nosql" aria-hidden="true">#</a> Why NoSQL</h3><ol><li>We need to store large number of data and do not need strict structure, therefore we can add any new attribute if we want</li><li>We can easily scale the database by add more machines, it has higher scalability</li><li>Suitable for rapid development, because the data structure can be updated frequently, and the quick iteration will not bring much downtime</li></ol>',5);function y(b,p){const i=d("RouterLink");return n(),o("div",null,[u,e("ul",null,[h,e("li",null,[t("Reliability - "),r(i,{to:"/notes/systemDesign/ACID-compliancy.html"},{default:s(()=>[t("ACID Compliancy")]),_:1}),m])]),f])}const w=l(c,[["render",y],["__file","SQL-vs-NoSQL.html.vue"]]);export{w as default};
